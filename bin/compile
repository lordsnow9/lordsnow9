#!/bin/bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

PACKAGES="
 xz-utils
 aria2
 vim
 tmux
 libwebsockets-dev
 libjson-c-dev
"

if [ ! -f $CACHE_DIR/PURGED_CACHE_V1 ]; then
  topic "Purging cache"
  rm -rf $CACHE_DIR/apt
  rm -rf $CACHE_DIR/archives
  rm -rf $CACHE_DIR/lists
  touch $CACHE_DIR/PURGED_CACHE_V1
fi

topic "Installing"

# PACKAGES="$PACKAGES https://dl.google.com/linux/direct/google-chrome-${channel}_current_amd64.deb"

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

topic "Updating apt caches"
apt-get $APT_OPTIONS update | indent

for PACKAGE in $PACKAGES; do
  if [[ $PACKAGE == *deb ]]; then
    PACKAGE_NAME=$(basename $PACKAGE .deb)
    PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

    topic "Fetching $PACKAGE"
    curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
  else
    topic "Fetching .debs for $PACKAGE"
    apt-get $APT_OPTIONS -y --force-yes -d install --reinstall $PACKAGE | indent
  fi
done

mkdir -p $BUILD_DIR/.local/bin

cat <<EOF > $BUILD_DIR/.local/bin/dl
#!/bin/sh
exec aria2c --summary-interval=0 --console-log-level=error --disable-ipv6 --check-certificate=false --file-allocation=none -c -P -x4 -s4 "\$@"
EOF
chmod 775 $BUILD_DIR/.local/bin/dl

curl -fsLO "https://megatools.megous.com/builds/experimental/megatools-1.11.0-git-20190608-linux-x86_64.tar.gz"
tar xf megatools-1.11.0-git-20190608-linux-x86_64.tar.gz &&\
mv megatools-1.11.0-git-20190608-linux-x86_64/megatools $BUILD_DIR/.local/bin &&\
rm -fr megatools-1.11.0-git-20190608-linux-x86_64*

curl -fsLO https://github.com/thetmk/mtn/releases/download/0.2/mtn-20160215-ffmpeg-2.7.7.zip &&\
unzip mtn-20160215-ffmpeg-2.7.7.zip &&\
mv mtn $BUILD_DIR/.local/bin &&\
rm mtn-20160215-ffmpeg-2.7.7.zip gpl-2.0.txt
mkdir -p $BUILD_DIR/.fonts
curl -fsL -o $BUILD_DIR/.fonts/cousine.ttf https://github.com/google/fonts/raw/master/apache/cousine/Cousine-Regular.ttf
cat <<EOF > $BUILD_DIR/.local/bin/mkth
#!/bin/sh
mtn -f \$HOME/.fonts/cousine.ttf -b 2 -c 4 -D 0 -h 100 -j 50 -P -s 120 "\${@}"
exit \$?
EOF
chmod 775 $BUILD_DIR/.local/bin/mkth
cat <<EOF > $BUILD_DIR/.local/bin/mkth1
#!/bin/sh
mtn -f \$HOME/.fonts/cousine.ttf -b 2 -c 4 -D 0 -h 100 -j 50 -P -s 60 "\${@}"
exit \$?
EOF
chmod 775 $BUILD_DIR/.local/bin/mkth1

curl -fsLO "https://johnvansickle.com/ffmpeg/builds/ffmpeg-git-amd64-static.tar.xz" &&\
tar xf ffmpeg-git-amd64-static.tar.xz &&\
mv ffmpeg-*-amd64-static ffmpeg &&\
rm ffmpeg-git-amd64-static.tar.xz ffmpeg/ffprobe &&\
mv ffmpeg $BUILD_DIR/.local/bin/

curl -fsLO "https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip" &&\
unzip -d $BUILD_DIR/.local/bin ngrok-stable-linux-amd64.zip && rm ngrok-stable-linux-amd64.zip

curl -fsLO "https://raw.githubusercontent.com/DarthSnow/nfiles/master/nterm-git-gz-bin.tar.xz" && tar xf nterm-git-gz-bin.tar.xz -C $BUILD_DIR/.local/bin && rm nterm-git-gz-bin.tar.xz

curl -fsLO "https://panzer-peas.000webhostapp.com/files/nginx-portable.tar.xz" &&\
tar xf nginx-portable.tar.xz -C $BUILD_DIR &&\
mv $BUILD_DIR/nginx-portable $BUILD_DIR/nginx &&\
mv $BUILD_DIR/nginx/conf/nginx.conf $BUILD_DIR/nginx/conf/nginx.conf.bak &&\
curl -fsL -o $BUILD_DIR/nginx/conf/nginx.conf "https://panzer-peas.000webhostapp.com/files/nginx.conf" &&\
mv $BUILD_DIR/nginx/nginx-portable $BUILD_DIR/nginx/service

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  topic "Installing $(basename $DEB)"
  dpkg -x $DEB $BUILD_DIR/.local/
done

topic "Writing profile script"

cat <<EOF >$BUILD_DIR/.bash_profile
# source the users bashrc if it exists
if [ -f "\${HOME}/.bashrc" ]
then
  source "\${HOME}/.bashrc"
fi
EOF
cat <<EOF >$BUILD_DIR/.bashrc
alias ls='ls --color=tty'
EOF

mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
export PATH="\$HOME/.local/bin:\$HOME/.local/usr/bin:\$HOME/.local/bin/ffmpeg:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.local/usr/lib/x86_64-linux-gnu:\$HOME/.local/usr/lib/i386-linux-gnu:\$HOME/.local/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.local/usr/lib/x86_64-linux-gnu:\$HOME/.local/usr/lib/i386-linux-gnu:\$HOME/.local/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.local/usr/include:\$HOME/.local/usr/include/x86_64-linux-gnu:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.local/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.local/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.local/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
export TERM="linux"
export LANG="en_US.UTF-8"
export LOCALE="UTF-8"
EOF

topic "DONE."
